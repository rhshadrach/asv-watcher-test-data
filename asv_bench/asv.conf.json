{
    // The version of the config file format.  Do not change, unless
    // you know what you are doing.
    "version": 1,

    // The name of the project being benchmarked
    "project": "asv-watcher-test-data",

    // The project's homepage
    "project_url": "https://github.com/rhshadrach/asv-watcher-test-data",

    // The URL of the source code repository for the project being
    // benchmarked
    "repo": "..",

    // List of branches to benchmark. If not provided, defaults to "master"
    // (for git) or "default" (for mercurial).
    "branches": ["main"],

    // The tool to use to create environments.  May be "conda",
    // "virtualenv" or other value depending on the plugins in use.
    // If missing or the empty string, the tool will be automatically
    // determined by looking for tools on the PATH environment
    // variable.
    "environment_type": "virtualenv",

    // the base URL to show a commit for the project.
    "show_commit_url": "https://github.com/rhshadrach/asv-watcher-test-data/commit/",

    // The Pythons you'd like to test against.  If not provided, defaults
    // to the current version of Python used to run `asv`.
    "pythons": ["3.8"],

    // The matrix of dependencies to test.  Each key is the name of a
    // asv_watcher_test_data (in PyPI) and the values are version numbers.  An empty
    // list or empty string indicates to just test against the default
    // (latest) version. null indicates that the asv_watcher_test_data is to not be
    // installed. If the asv_watcher_test_data to be tested is only available from
    // PyPi, and the 'environment_type' is conda, then you can preface
    // the asv_watcher_test_data name by 'pip+', and the asv_watcher_test_data will be installed via
    // pip (with all the conda available packages installed first,
    // followed by the pip installed packages).
    "matrix": {},
    // Combinations of libraries/python versions can be excluded/included
    // from the set to test. Each entry is a dictionary containing additional
    // key-value pairs to include/exclude.
    //
    // An exclude entry excludes entries where all values match. The
    // values are regexps that should match the whole string.
    //
    // An include entry adds an environment. Only the packages listed
    // are installed. The 'python' key is required. The exclude rules
    // do not apply to includes.
    //
    // In addition to asv_watcher_test_data names, the following keys are available:
    //
    // - python
    //     Python version, as in the *pythons* variable above.
    // - environment_type
    //     Environment type, as above.
    // - sys_platform
    //     Platform, as in sys.platform. Possible values for the common
    //     cases: 'linux2', 'win32', 'cygwin', 'darwin'.
    "exclude": [],
    "include": [],

    // The directory (relative to the current directory) that benchmarks are
    // stored in.  If not provided, defaults to "benchmarks"
    // "benchmark_dir": "benchmarks",

    // The directory (relative to the current directory) to cache the Python
    // environments in.  If not provided, defaults to "env"
    // "env_dir": "env",

    // The directory (relative to the current directory) that raw benchmark
    // results are stored in.  If not provided, defaults to "results".
    // "results_dir": "results",

    // The directory (relative to the current directory) that the html tree
    // should be written to.  If not provided, defaults to "html".
    // "html_dir": "html",

    // The number of characters to retain in the commit hashes.
    // "hash_length": 8,

    // `asv` will cache wheels of the recent builds in each
    // environment, making them faster to install next time.  This is
    // number of builds to keep, per environment.
    "build_cache_size": 8,

    // The commits after which the regression search in `asv publish`
    // should start looking for regressions. Dictionary whose keys are
    // regexps matching to benchmark names, and values corresponding to
    // the commit (exclusive) after which to start looking for
    // regressions.  The default is to start from the first commit
    // with results. If the commit is `null`, regression detection is
    // skipped for the matching benchmark.
    //
     "regressions_first_commits": {
         ".*": "4c9295533b3bea1f4fd9dd8d24971978146041c0"
     },
    "regression_thresholds": {
    },
    "build_command": [
        "python -m pip install build setuptools-scm",
        "python -m build --no-isolation -o {build_cache_dir}",
    ]
}
